load("C:/Users/Eric/Desktop/cycle3cvd-team8/output/feature_train_comb.RData")
load("C:/Users/Eric/Desktop/cycle3cvd-team8/output/feature_test_comb.RData")
View(dat)
dim(dat)
dim(dat.t)
tail(dat)
#############################################
### Main execution script for experiments ###
#############################################
### Specify directories
###setwd("C:\\Users\\Eric\\Documents\\Columbia University\\Spring 2016\\Data Science\\Project 3")
img_dir <- "C:\\Users\\Eric\\Documents\\Columbia University\\Spring 2016\\Data Science\\Project 3\\images\\"
dir_names <- list.files(img_dir)
img_train_dir <- "C:\\Users\\Eric\\Documents\\Columbia University\\Spring 2016\\Data Science\\Project 3\\train\\train\\"
img_test_dir <- "C:\\Users\\Eric\\Documents\\Columbia University\\Spring 2016\\Data Science\\Project 3\\test\\test\\"
### Import training images Breed Labels
label_test <- scan("C:\\Users\\Eric\\Desktop\\cycle3cvd-team8\\data\\breed_index_test1.txt")
label_train <- scan("C:\\Users\\Eric\\Desktop\\cycle3cvd-team8\\data\\breed_index_train1.txt")
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
dat = cbind(dat_train, label_train)
dat = as.data.frame(dat)
n <- names(dat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
f
fittednet <- neuralnet(f,dat, hidden = 1, threshold = 0.01,
stepmax = 1e+05, rep = 1, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",
linear.output = TRUE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
library(neuralnet)
library(MASS)
library(grid)
fittednet.results <- compute(fittednet, dat_test)
results = fittednet.results$net.result
neuralnet.outcome <- ifelse(test = results >= .5, yes = 1, no= 0)
n_length <- 2229
(sum(neuralnet.outcome == label_test) / n_length )* 100
#67.83310902% accuracy. Meh.
View(dat.t)
dim(dat.t)
library(neuralnet)
library(MASS)
library(grid)
fittednet.results <- compute(fittednet, dat.t)
results = fittednet.results$net.result
neuralnet.outcome <- ifelse(test = results >= .5, yes = 1, no= 0)
n_length <- 2229
(sum(neuralnet.outcome == label_test) / n_length )* 100
#67.83310902% accuracy. Meh.
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
dat = cbind(dat_train, label_train)
dat = as.data.frame(dat)
n <- names(dat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
f
fittednet <- neuralnet(f,dat, hidden = 1, threshold = 0.01,
stepmax = 1e+05, rep = 1, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",
linear.output = FALSE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
View(dat)
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
dat = cbind(dat, label_train)
dat = as.data.frame(dat)
n <- names(dat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
f
fittednet <- neuralnet(f,dat, hidden = 1, threshold = 0.01,
stepmax = 1e+05, rep = 1, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",
linear.output = FALSE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
library(neuralnet)
library(MASS)
library(grid)
fittednet.results <- compute(fittednet, dat.t)
results = fittednet.results$net.result
neuralnet.outcome <- ifelse(test = results >= .5, yes = 1, no= 0)
n_length <- 2229
(sum(neuralnet.outcome == label_test) / n_length )* 100
#67.83310902% accuracy. Meh.
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
dat = cbind(dat, label_train)
dat = as.data.frame(dat)
n <- names(dat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
f
fittednet <- neuralnet(f,dat, hidden = 1, threshold = 0.01,
stepmax = 1e+05, rep = 1, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",
linear.output = FALSE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
fittednet.results <- compute(fittednet, dat.t)
results = fittednet.results$net.result
View(results)
load("C:/Users/Eric/Desktop/cycle3cvd-team8/output/feature_test_comb.RData")
load("C:/Users/Eric/Desktop/cycle3cvd-team8/output/feature_train_comb.RData")
dim(dat)
View(dat)
View(dat.t)
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
traindat = cbind(dat, label_train)
traindat = as.data.frame(traindat)
n <- names(traindat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
fittednet <- neuralnet(f,traindat, hidden = 1, threshold = 0.01,
stepmax = 1e+05, rep = 1, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",
linear.output = FALSE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
library(neuralnet)
library(MASS)
library(grid)
fittednet.results <- compute(fittednet, dat.t)
results = fittednet.results$net.result
neuralnet.outcome <- ifelse(test = results >= .5, yes = 1, no= 0)
n_length <- 2229
(sum(neuralnet.outcome == label_test) / n_length )* 100
#67.83310902% accuracy. Meh.
View(results)
dim(dat.t)
View(fittednet.results)
View(neuralnet.outcome)
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
traindat = cbind(dat, label_train)
traindat = as.data.frame(traindat)
n <- names(traindat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
fittednet <- neuralnet(f,traindat, hidden = 2, threshold = 0.01,
stepmax = 1e+05, rep = 1, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",
linear.output = FALSE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
library(neuralnet)
library(MASS)
library(grid)
fittednet.results <- compute(fittednet, dat.t)
results = fittednet.results$net.result
neuralnet.outcome <- ifelse(test = results >= .5, yes = 1, no= 0)
n_length <- 2229
(sum(neuralnet.outcome == label_test) / n_length )* 100
#67.83310902% accuracy. Meh.
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
traindat = cbind(dat, label_train)
traindat = as.data.frame(traindat)
n <- names(traindat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
fittednet <- neuralnet(f,traindat, hidden = 4, threshold = 0.01,
stepmax = 1e+05, rep = 1, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",
linear.output = FALSE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
library(neuralnet)
library(MASS)
library(grid)
fittednet.results <- compute(fittednet, dat.t)
results = fittednet.results$net.result
neuralnet.outcome <- ifelse(test = results >= .5, yes = 1, no= 0)
n_length <- 2229
(sum(neuralnet.outcome == label_test) / n_length )* 100
#67.83310902% accuracy. Meh.
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
traindat = cbind(dat, label_train)
traindat = as.data.frame(traindat)
n <- names(traindat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
fittednet <- neuralnet(f,traindat, hidden = 4, threshold = 0.01,
stepmax = 1e+05, rep = 2, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",
linear.output = FALSE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
library(neuralnet)
library(MASS)
library(grid)
fittednet.results <- compute(fittednet, dat.t)
results = fittednet.results$net.result
neuralnet.outcome <- ifelse(test = results >= .5, yes = 1, no= 0)
n_length <- 2229
(sum(neuralnet.outcome == label_test) / n_length )* 100
#67.83310902% accuracy. Meh.
dim(dat.t)
View(results)
fittednet
View(dat)
dim(dat)
dim(dat.t)
load("C:/Users/Eric/Desktop/cycle3cvd-team8/output/feature_test_con.RData")
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
traindat = cbind(dat, label_train)
traindat = as.data.frame(traindat)
n <- names(traindat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
fittednet <- neuralnet(f,traindat, hidden = 10, threshold = 0.01,
stepmax = 1e+05, rep = 5, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",
linear.output = FALSE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
#67.83310902% accuracy. Meh.
library(neuralnet)
library(MASS)
library(grid)
fittednet.results <- compute(fittednet, dat.t)
results = fittednet.results$net.result
neuralnet.outcome <- ifelse(test = results >= .5, yes = 1, no= 0)
n_length <- 2229
(sum(neuralnet.outcome == label_test) / n_length )* 100
#67.83310902% accuracy. Meh.
dim(traindat)
View(traindat)
View(dat.t)
fittednet.results
names(fittednet.results)
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
traindat = cbind(dat, label_train)
traindat = as.data.frame(traindat)
n <- names(traindat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
fittednet <- neuralnet(f,traindat, hidden = 10, threshold = 0.01,
stepmax = 1e+05, rep = 5, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",
linear.output = FALSE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
library(neuralnet)
library(MASS)
library(grid)
fittednet.results <- compute(fittednet, dat.t)
results = fittednet.results$net.result
neuralnet.outcome <- ifelse(test = results >= .5, yes = 1, no= 0)
n_length <- 2229
(sum(neuralnet.outcome == label_test) / n_length )* 100
#67%
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
traindat = cbind(dat, label_train)
traindat = as.data.frame(traindat)
n <- names(traindat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
fittednet <- neuralnet(f,traindat, hidden = 10, threshold = 0.01,
stepmax = 1e+05, rep = 5, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",
linear.output = TRUE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
fittednet.results <- compute(fittednet, dat.t)
results = fittednet.results$net.result
View(results)
View(label_train)
traindat[label_train]
View(traindat[label_train])
dim(traindat)
View(traindat[,803])
View(traindat[,802])
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
traindat = cbind(dat, label_train)
traindat = as.data.frame(traindat)
n <- names(traindat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
fittednet <- neuralnet(f,traindat, hidden = 10, threshold = 0.01,
stepmax = 1e+05, rep = 5, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "backprop",
err.fct = "sse", act.fct = "logistic",
linear.output = FALSE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
library(neuralnet)
library(MASS)
library(grid)
#I'm aware there's a faster way, but there's some bug with the neuralnet package, as documented in stack overflow.
#http://stackoverflow.com/questions/17794575/error-in-terms-formulaformula-in-formula-and-no-data-argument
traindat = cbind(dat, label_train)
traindat = as.data.frame(traindat)
n <- names(traindat)
f <- as.formula(paste("label_train ~", paste(n[!n %in% "label_train"], collapse = " + ")))
fittednet <- neuralnet(f,traindat, hidden = 10, threshold = 0.01,
stepmax = 1e+05, rep = 5, startweights = NULL,
learningrate.limit = NULL,
learningrate.factor = list(minus = 0.5, plus = 1.2),
learningrate=NULL, lifesign = "none",
lifesign.step = 1000, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic",
linear.output = FALSE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
library(neuralnet)
library(MASS)
library(grid)
fittednet.results <- compute(fittednet, dat.t)
results = fittednet.results$net.result
neuralnet.outcome <- ifelse(test = results >= .5, yes = 1, no= 0)
n_length <- 2229
(sum(neuralnet.outcome == label_test) / n_length )* 100
#67%
